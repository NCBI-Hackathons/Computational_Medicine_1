#!/usr/bin/env python3

import click
import zipfile
import json
import pdb
import sys
import re
from collections import defaultdict
import operator
import os
import tabix
import requests


@click.group()
def cli():
    """prepare the local environment, download tools and databases"""
    pass


@cli.command('help')
def help():
    print('''some useful command line examples

    wget https://www.ebi.ac.uk/gwas/api/search/downloads/alternative
    ./tool1.py gwas --infile alternative --keyword cardiomyop --outfile cardiomyop_snps.txt

    ./tool1.py rs2chrompos --rsfile cardiomyop_snps.txt  --outfile rsinfo1.json

    ./tool1.py extract1kg --rsjson  rsinfo1.json  --rsfile cardiomyop_snps.txt --outfile please.txt

''')


@cli.command('gwas')
@click.option("--infile",
              type=click.Path(exists=True),
              help="gwas file")
@click.option("--keyword",
              help="text string to filter the file")
@click.option("--outfile",
              type=click.Path(),
              help="text file of the found snps")
def do_gwas(infile, keyword, outfile):
    """process the gwas catalog

    https://www.ebi.ac.uk/gwas/api/search/downloads/alternative

    found from
    https://www.ebi.ac.uk/gwas/docs/file-downloads
    """

    if infile is None:
        click.echo('I need --infile thefile')
        return

    rsnums = set()
    with open(infile) as infh:
        for line in infh:
            if keyword:
                if keyword not in line.lower():
                    continue
            parts = line.split('\t')
            rsnum = parts[21]
            if rsnum:
                m = re.search('^rs\d+$', rsnum)
                if not m:
                    #print('fail %s' % rsnum)
                    many = re.findall('(rs\d+)', rsnum)
                    if many:
                        for rs in many:
                            rsnums.add(rsnum)
                            #print('salvaged %s from "%s"' % (rs, parts[21]))
                        #print('')

                if rsnum.startswith('rs'):
                    rsnums.add(rsnum)

    if outfile:
        outfh = open(outfile, 'w')
    else:
        outfh = sys.stdout

    for rsnum in rsnums:
        outfh.write('%s\n' % rsnum)




def homo(geno):
    if geno is None:
        return True
    a1, a2 = geno[0], geno[1]
    if a1 == a2:
        return True
    return False

def het(geno):
    if geno is None:
        return True
    a1, a2 = geno[0], geno[1]
    if a1 != a2:
        return True
    return False

def list_get(alist, index):
    if index < len(alist):
        return alist[index]
    return None




@cli.command('rs2chrompos')
@click.option("--rsfile",
              type=click.Path(exists=True))
@click.option("--outfile",
              type=click.Path(),
              help="tab file")
def do_rs2chrompos(rsfile, outfile):
    """
    """


    rsnums = set()
    allsnpinfo = []
    with open(rsfile) as infh :
        for i, line in enumerate(infh):
            rsnum = line.strip().split('\t')[0]
            rsnums.add(rsnum)
            rsid = rsnum[2:]
            r = requests.get('https://api.ncbi.nlm.nih.gov/variation/v0/refsnp/%s' % rsid, headers={'accept': 'application/json'})
            struct = json.loads(r.text)
            allsnpinfo.append(struct)

    with open(outfile, 'w') as outfh:
        json.dump(allsnpinfo, outfh, indent=4, sort_keys=True)


@cli.command('extract1kg')
@click.option("--rsjson",
              type=click.Path(exists=True),
              help='the file generated by rs2chrompos')
@click.option("--rsfile",
              type=click.Path(exists=True),
              help='a list of rs#s of interest (possibly only a subset of the contents of --rsjson')
@click.option("--outfile",
              type=click.Path(),
              help="a tab delimited file")
@click.option("--1kgdir", 'dir1kg',
              default='/mnt/gnomad/1kgenomes/20130502',
              help='local copy of files from ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/')
def do_extract1kg(rsjson, rsfile, outfile, dir1kg):
    """
    extract genotype information from 1000 Genomes project and prepare it for further analysis in R
    """

    if not os.path.exists(dir1kg):
        click.echo('I need a valid --1kgdir which should point to a download of ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/')
        return

    wanted_rsnums = None
    if rsfile:
        wanted_rsnums = set()
        with open(rsfile) as rsfh:
            for line in rsfh:
                rsnum = line.strip().split('\t')[0]
                wanted_rsnums.add(rsnum)

    rsnum2chrompos = {}
    with open(rsjson) as infh:
        big = json.load(infh)

        ## this ugly block aggressively tries to find *any* plausible chrom & pos on from the dbsnp json
        for rec in big:
            maybepos = set()
            rsids = set()

            placements = rec.get('primary_snapshot_data').get('placements_with_allele')
            for placement in placements:
                for thing5 in placement.get('alleles'):
                    spdi = thing5.get('allele').get('spdi')
                    chrom = spdi.get('seq_id')
                    if chrom.startswith('NC_'):
                        chromname = simplify_chrom(chrom)
                        pos = spdi.get('position')
                        maybepos.add((chromname, pos))

            things = rec.get('present_obs_movements')
            for thing in things:
                thing2 = thing.get('previous_release')
                if thing2:
                    morersids = thing2.get('rsids')
                    for rsid in morersids:
                        rsids.add(rsid)
                    chrom = thing2.get('allele').get('seq_id')
                    if chrom.startswith('NC_'):
                        chromname = simplify_chrom(chrom)
                        pos = thing2.get('allele').get('position')
                        maybepos.add((chromname, pos))

            for rsid in rsids:
                rsnum = 'rs%s' % rsid
                if wanted_rsnums and rsnum not in wanted_rsnums:
                    continue
                rsnum2chrompos['rs%s' % rsid] = maybepos

    flank = 100
    transposed = {}

    rsnums = rsnum2chrompos.keys()
    for rsnum, vals in rsnum2chrompos.items():
        found = False
        for val in vals:
            chromname, pos = val
            pos = int(pos)
            afn = '%s/ALL.chr%s.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz' % (dir1kg, chromname)

            if not os.path.exists(afn):
                print('unable to find %s for %s' % (afn, rsnum))
                continue
            try:
                tabixed = tabix.open(afn)
                records = tabixed.query(str(chromname), pos-flank, pos+flank)
            except Exception as e:
                print('fail %s' % afn)
                records = []

            for record in records:
                if record[2] != rsnum: continue
                found = True
                for i,geno in enumerate(record[9:]):
                    if i not in transposed:
                        transposed[i] = {}
                    transposed[i][rsnum] = geno

        if not found:
            print('rsnum %s not found in 1kg, checked %s' % (rsnum, str(vals)))

    with open(outfile,'w') as outfh:
        outfh.write('filename\t')
        outfh.write('\t'.join(rsnums))
        outfh.write('\n')
        for filename in transposed:
            outfh.write('%s' % filename)
            for rsnum in rsnums:
                outfh.write('\t%s' % pretty(transposed[filename].get(rsnum)))
            outfh.write('\n')


def pretty(s):
    if s is None:
        return '3'
    elif s == '0|0':
        return '0'
    elif s == '0|1':
        return '1'
    elif s == '1|0':
        return '1'
    elif s == '1|1':
        return '2'
    else:
        print('what?! %s' % s)
        pdb.set_trace()

def simplify_chrom(s):
    m = re.search('NC_(\d+)', s)
    if m:
        return int(m.group(1))
    return None

if __name__ == '__main__':
    cli()
